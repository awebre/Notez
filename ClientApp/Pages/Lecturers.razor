@page "/lecturers"
@using Microsoft.AspNetCore.Components.Forms

<h1>Lectures</h1>

<p>View and create lectures for your students to add notes.</p> 

@if(!isAdding) {
    <div>
        <button class="btn btn-primary" @onclick="StartAddLecture">Add Lecturer</button>
    </div>
}

@if (lectures == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if(isAdding){
        <h1>Lecture</h1>
        <EditForm Model="lecture" OnValidSubmit="AddLecture">
            <div>
                <label>
                    Lecture Name:
                    <InputText @bind-Value="lecture.Name"></InputText>
                </label>
            </div>
            <div>
                <label>
                    Link:
                    <InputText @bind-Value="lecture.Link"></InputText>
                </label>
            </div>
            <div>
                <button class="btn btn-default" @onclick="CancelAdd">Cancel</button>
                <button class="btn btn-primary" type="submit">Submit</button>
            </div>
        </EditForm>
    }
    else{
        <table class="table">
            <thead>
                <tr>
                    <th>Actions</th>
                    <th>Name</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Link</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var lecture in lectures)
                {
                    <tr>
                        <td>
                            <button class="btn btn-sm btn-primary" @onclick="() => StartEditLecture(lecture)">Edit</button>
                        </td>
                        <td>@lecture.Name</td>
                        <td>@lecture.StartDateTime</td>
                        <td>@lecture.EndDateTime</td>
                        <td>
                            @if(!string.IsNullOrEmpty(lecture.Link))
                            {
                                <a href="@lecture.Link">View</a>
                            }
                            else 
                            {
                                <span>n/a</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>   
    }
}

@code {
    private List<LectureDto> lectures;

    private LectureDto lecture = new LectureDto();

    private bool isAdding;

    protected override async Task OnInitializedAsync()
    {
        lectures = new List<LectureDto>();
    }

    private void StartAddLecture(){
        isAdding = true;
    }

    private void StartEditLecture(LectureDto lecture){
        this.lecture = lecture;
        StartAddLecture();
    }

    private void AddLecture() {
        lectures.Add(lecture);
        lecture = new LectureDto();
        CancelAdd();
    }

    private void CancelAdd(){
        isAdding = false;
    }

    public class LectureDto
    {
        public Guid SessionGuid { get; set; }

        public string Name { get; set; }

        public string Link { get; set; }

        public DateTimeOffset? StartDateTime { get; set; }

        public DateTimeOffset? EndDateTime { get; set; }
    }
}